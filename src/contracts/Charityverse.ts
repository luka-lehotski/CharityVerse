/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "set_up_fundraiser(uint64,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "donate(pay)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAxMDAwMDAwCmJ5dGVjYmxvY2sgMHggMHg2ZjcyNjc2MTZlNjk3YTYxNzQ2OTZmNmUgMHg2MzYxNzU3MzY1IDB4NjM3NTcyNzI2NTZlNzQ2Yzc5NWY3MjYxNjk3MzY1NjQgMHg3NzYxNjc2NTcyIDB4NjI2NTZlNjU2NjY5NjM2OTYxNzI3OSAweDYxNzA3MDcyNmY3NjY1NjQgMHg3NDcyNzU3Mzc0NjU2NQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGZiZGFkYjE1IC8vICJzZXRfdXBfZnVuZHJhaXNlcih1aW50NjQsc3RyaW5nLHN0cmluZyl2b2lkIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDA4MWMwMjEzIC8vICJkb25hdGUocGF5KXN0cmluZyIKPT0KYm56IG1haW5fbDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhkNjExZGJkOCAvLyAiYXBwcm92ZSgpdm9pZCIKPT0KYm56IG1haW5fbDUKZXJyCm1haW5fbDU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgYXBwcm92ZWNhc3Rlcl83CmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGRvbmF0ZWNhc3Rlcl82CmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHNldHVwZnVuZHJhaXNlcmNhc3Rlcl81CmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMgp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sMTEKZXJyCm1haW5fbDExOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBvcHRpbl8xCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgY3JlYXRlXzAKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBjcmVhdGUKY3JlYXRlXzA6CnByb3RvIDAgMApieXRlYyA2IC8vICJhcHByb3ZlZCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNSAvLyAiYmVuZWZpY2lhcnkiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMiAvLyAiY2F1c2UiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMyAvLyAiY3VycmVudGx5X3JhaXNlZCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAib3JnYW5pemF0aW9uIgpieXRlY18wIC8vICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDcgLy8gInRydXN0ZWUiCmJ5dGVjXzAgLy8gIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNCAvLyAid2FnZXIiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gIm9yZ2FuaXphdGlvbiIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIG9wdF9pbgpvcHRpbl8xOgpwcm90byAwIDAKYnl0ZWNfMiAvLyAiY2F1c2UiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzAgLy8gIiIKIT0KdHhuIFNlbmRlcgpieXRlY18xIC8vICJvcmdhbml6YXRpb24iCmFwcF9nbG9iYWxfZ2V0CiE9CiYmCmJueiBvcHRpbl8xX2wyCmludGNfMCAvLyAwCnJldHVybgpvcHRpbl8xX2wyOgpieXRlYyA3IC8vICJ0cnVzdGVlIgp0eG4gU2VuZGVyCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gc2V0X3VwX2Z1bmRyYWlzZXIKc2V0dXBmdW5kcmFpc2VyXzI6CnByb3RvIDMgMAp0eG4gU2VuZGVyCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CnR4biBTZW5kZXIKYnl0ZWNfMSAvLyAib3JnYW5pemF0aW9uIgphcHBfZ2xvYmFsX2dldAo9PQphc3NlcnQKYnl0ZWMgNCAvLyAid2FnZXIiCmZyYW1lX2RpZyAtMwphcHBfZ2xvYmFsX3B1dApieXRlY18yIC8vICJjYXVzZSIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDUgLy8gImJlbmVmaWNpYXJ5IgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBkb25hdGUKZG9uYXRlXzM6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnR4biBTZW5kZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjXzIgLy8gImNhdXNlIgphcHBfZ2xvYmFsX2dldApieXRlY18wIC8vICIiCiE9CmFzc2VydAppbnRjXzEgLy8gcGF5CmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAtMQpndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQphc3NlcnQKYnl0ZWNfMyAvLyAiY3VycmVudGx5X3JhaXNlZCIKYnl0ZWNfMyAvLyAiY3VycmVudGx5X3JhaXNlZCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0xCmd0eG5zIEFtb3VudAppbnRjXzIgLy8gMTAwMDAwMAovCisKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4NDg3NjYxNmM2MTIwNTY2MTZkMjA2ZTYxMjA2NDZmNmU2MTYzNjk2YTY5IC8vICJIdmFsYSBWYW0gbmEgZG9uYWNpamkiCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gYXBwcm92ZQphcHByb3ZlXzQ6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gIm9yZ2FuaXphdGlvbiIKYXBwX2dsb2JhbF9nZXQKIT0KYXNzZXJ0CmJ5dGVjXzMgLy8gImN1cnJlbnRseV9yYWlzZWQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjIDQgLy8gIndhZ2VyIgphcHBfZ2xvYmFsX2dldAo+PQphc3NlcnQKYnl0ZWMgNiAvLyAiYXBwcm92ZWQiCmludGNfMSAvLyAxCmFwcF9nbG9iYWxfcHV0Cml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgU2VuZGVyCmJ5dGVjIDUgLy8gImJlbmVmaWNpYXJ5IgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIFJlY2VpdmVyCmJ5dGVjIDQgLy8gIndhZ2VyIgphcHBfZ2xvYmFsX2dldAppbnRjXzIgLy8gMTAwMDAwMAoqCml0eG5fZmllbGQgQW1vdW50Cml0eG5fc3VibWl0CnJldHN1YgoKLy8gc2V0X3VwX2Z1bmRyYWlzZXJfY2FzdGVyCnNldHVwZnVuZHJhaXNlcmNhc3Rlcl81Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHNldHVwZnVuZHJhaXNlcl8yCnJldHN1YgoKLy8gZG9uYXRlX2Nhc3Rlcgpkb25hdGVjYXN0ZXJfNjoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDEKY2FsbHN1YiBkb25hdGVfMwpmcmFtZV9idXJ5IDAKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gYXBwcm92ZV9jYXN0ZXIKYXBwcm92ZWNhc3Rlcl83Ogpwcm90byAwIDAKY2FsbHN1YiBhcHByb3ZlXzQKcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "approved": {
          "type": "uint64",
          "key": "approved",
          "descr": "Shows wether an action is approved or not"
        },
        "beneficiary": {
          "type": "bytes",
          "key": "beneficiary",
          "descr": "People in need "
        },
        "cause": {
          "type": "bytes",
          "key": "cause",
          "descr": "Cause"
        },
        "currently_raised": {
          "type": "uint64",
          "key": "currently_raised",
          "descr": "Currently raised"
        },
        "organization": {
          "type": "bytes",
          "key": "organization",
          "descr": "Charity organization"
        },
        "trustee": {
          "type": "bytes",
          "key": "trustee",
          "descr": "Trusted entity"
        },
        "wager": {
          "type": "uint64",
          "key": "wager",
          "descr": "Recources needed"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Charityverse",
    "methods": [
      {
        "name": "set_up_fundraiser",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          },
          {
            "type": "string",
            "name": "cause"
          },
          {
            "type": "string",
            "name": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "donate",
        "args": [
          {
            "type": "pay",
            "name": "payment"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "approve",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {},
    "desc": "dApp for funding charitable causes"
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the Charityverse smart contract.
 */
export type Charityverse = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'set_up_fundraiser(uint64,string,string)void' | 'set_up_fundraiser', {
      argsObj: {
        amount: bigint | number
        cause: string
        address: string
      }
      argsTuple: [amount: bigint | number, cause: string, address: string]
      returns: void
    }>
    & Record<'donate(pay)string' | 'donate', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: string
    }>
    & Record<'approve()void' | 'approve', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * Shows wether an action is approved or not
       */
      'approved'?: IntegerState
      /**
       * People in need 
       */
      'beneficiary'?: BinaryState
      /**
       * Cause
       */
      'cause'?: BinaryState
      /**
       * Currently raised
       */
      'currently_raised'?: IntegerState
      /**
       * Charity organization
       */
      'organization'?: BinaryState
      /**
       * Trusted entity
       */
      'trustee'?: BinaryState
      /**
       * Recources needed
       */
      'wager'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CharityverseSig = keyof Charityverse['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CharityverseSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Charityverse smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CharityverseSig> = Charityverse['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Charityverse smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CharityverseSig> = Charityverse['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CharityverseCreateCalls = (typeof CharityverseCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CharityverseCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CharityverseDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CharityverseCreateCalls) => CharityverseCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CharityverseCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Charityverse smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Charityverse smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_up_fundraiser(uint64,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setUpFundraiser(args: MethodArgs<'set_up_fundraiser(uint64,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_up_fundraiser(uint64,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.cause, args.address],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the donate(pay)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static donate(args: MethodArgs<'donate(pay)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'donate(pay)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approve(args: MethodArgs<'approve()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Charityverse smart contract
 */
export class CharityverseClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CharityverseClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Charityverse['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Charityverse smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CharityverseDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CharityverseCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Charityverse smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Charityverse smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.optIn(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Charityverse smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the set_up_fundraiser(uint64,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setUpFundraiser(args: MethodArgs<'set_up_fundraiser(uint64,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityverseCallFactory.setUpFundraiser(args, params))
  }

  /**
   * Calls the donate(pay)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public donate(args: MethodArgs<'donate(pay)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityverseCallFactory.donate(args, params))
  }

  /**
   * Calls the approve()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approve(args: MethodArgs<'approve()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CharityverseCallFactory.approve(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Charityverse['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get approved() {
        return CharityverseClient.getIntegerState(state, 'approved')
      },
      get beneficiary() {
        return CharityverseClient.getBinaryState(state, 'beneficiary')
      },
      get cause() {
        return CharityverseClient.getBinaryState(state, 'cause')
      },
      get currently_raised() {
        return CharityverseClient.getIntegerState(state, 'currently_raised')
      },
      get organization() {
        return CharityverseClient.getBinaryState(state, 'organization')
      },
      get trustee() {
        return CharityverseClient.getBinaryState(state, 'trustee')
      },
      get wager() {
        return CharityverseClient.getIntegerState(state, 'wager')
      },
    }
  }

  public compose(): CharityverseComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setUpFundraiser(args: MethodArgs<'set_up_fundraiser(uint64,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setUpFundraiser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      donate(args: MethodArgs<'donate(pay)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.donate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approve(args: MethodArgs<'approve()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CharityverseComposer
  }
}
export type CharityverseComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_up_fundraiser(uint64,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setUpFundraiser(args: MethodArgs<'set_up_fundraiser(uint64,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityverseComposer<[...TReturns, MethodReturn<'set_up_fundraiser(uint64,string,string)void'>]>

  /**
   * Calls the donate(pay)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donate(args: MethodArgs<'donate(pay)string'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityverseComposer<[...TReturns, MethodReturn<'donate(pay)string'>]>

  /**
   * Calls the approve()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approve(args: MethodArgs<'approve()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): CharityverseComposer<[...TReturns, MethodReturn<'approve()void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Charityverse smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityverseComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Charityverse smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): CharityverseComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CharityverseComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CharityverseComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<CharityverseComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CharityverseComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CharityverseComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
